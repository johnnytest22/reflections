What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, Git adds metadata to your directory that lets it track all the different changes you'll be making from this point forward. Essentially, it initializes the version control process.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory in that it acts as a midpoint between the two. In your working directory, you may have made more than one logical change to a file or files and wish to keep them separate when committing to the repository. Having a staging area lets you queue up separate changes for committing.

How can you use the staging area to make sure you have one commit per logical change?

The staging area lets you have an intermediary between your repository and your working directory. This means you can isolate individual logical changes you made and commit them without jeapordizing the changes still to be committed in your working directory.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help you work on different sections of a project. You could keep your fully functional history in one master branch, and create separate branches to have experimental versions, projects with ongoing development work and specific features.